{"version":3,"sources":["API/axiosInstance.ts","components/Typography/Typography.styled.ts","utils/calculateDaysAgo.ts","components/ProfileInformations/ProfileInformations.styled.ts","components/RepoDetails/RepoDetails.styled.ts","components/RepoDetails/RepoDetails.tsx","components/UserRepoList.tsx","components/ProfileInformations/ProfileInformations.tsx","components/UserCard/UserCard.tsx","cssReset.ts","components/OrganizationDetails/OrganizationDetails.tsx","App.tsx","index.tsx"],"names":["axiosInstance","axios","create","baseURL","TextPrimary","styled","Text","TextHeader","calculateLastDay","fromDate","msDiff","Date","getTime","Math","floor","PopoverContainer","PopoverContent","theme","colors","border","RepoInfoContainer","Flex","RepoInfoButton","Button","RepoDetailInfoContainer","RepoDetails","login","repoName","useState","detailedRepoInformation","setDetailedRepoInformation","repoPullRequestsInformation","setRepoPullRequestsInformation","repoIssueInformation","setRepoIssueInformation","repoCommitsInformation","setRepoCommitsInformation","useEffect","then","data","name","length","stargazers_count","openIssues","filter","issue","state","closedIssues","calculateOpenClosedIssues","allPR","openedPR","calculatePullRequestsToIssuesRatio","commit","committer","date","UserRepoList","repos","map","repo","index","isLazy","ml","backgroundColor","width","h","ProfileInformations","fetched","setFetched","userInformation","setUserInformation","setRepos","ac","AbortController","Promise","all","catch","err","console","error","abort","justifyContent","created_at","UserCardButton","UserCard","avatar_url","borderWidth","borderRadius","overflow","m","size","src","alt","alignItems","fontFamily","flexDirection","cssReset","css","emotionReset","OrganizationDetails","organization","organizationsDetails","setOrganizationsDetails","organizationMembers","setOrganizationMembers","get","public_repos","toISOString","slice","App","users","setUsers","organizations","setOrganizations","styles","className","w","textAlign","templateColumns","gap","user","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAMMA,E,OAAgBC,EAAMC,OAJR,CACnBC,QAAS,2B,QCAJC,EAAcC,YAAOC,IAAPD,CAAH,oFAKXE,EAAaF,YAAOD,EAAPC,CAAH,sECRVG,EAAmB,SAACC,GACzB,GAAKA,EAAL,CACA,IAAMC,GAAS,IAAIC,MAAOC,UAAY,IAAID,KAAKF,GAAUG,UACzD,OAAOC,KAAKC,MAAMJ,EAAM,SCAnBK,EAAmBV,YAAOW,IAAPX,CAAH,iFAED,qBAAGY,MAAkBC,OAAOC,UAG3CC,EAAoBf,YAAOgB,IAAPhB,CAAH,qQAejBiB,EAAiBjB,YAAOkB,IAAPlB,CAAH,gKCpBdmB,EAA0BnB,YAAOgB,IAAPhB,CAAH,mF,OCmFdoB,EA1EK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EACkBC,qBADlB,mBACrCC,EADqC,KACZC,EADY,OAG3CF,qBAH2C,mBAErCG,EAFqC,KAERC,EAFQ,OAIYJ,qBAJZ,mBAIrCK,EAJqC,KAIfC,EAJe,OAKgBN,qBALhB,mBAKrCO,EALqC,KAKbC,EALa,KA6C5C,OAtCAC,qBAAU,WACTrC,EAAc,UAAD,OAAW0B,EAAX,YAAoBC,IAAYW,MAC5C,YAAmD,IAAhDC,EAA+C,EAA/CA,KACFT,EAA2BS,MAI7BvC,EAAc,UAAD,OAAW0B,EAAX,YAAoBC,EAApB,YAAuCW,MACnD,YAA4C,IAAzCC,EAAwC,EAAxCA,KACFL,EAAwBK,MAI1BvC,EAAc,UAAD,OAAW0B,EAAX,YAAoBC,EAApB,qBAAgDW,MAC5D,YAAkD,IAA/CC,EAA8C,EAA9CA,KACFP,EAA+BO,MAIjCvC,EAAc,UAAD,OAAW0B,EAAX,YAAoBC,EAApB,oBAA+CW,MAC3D,YAAiD,IAA9CC,EAA6C,EAA7CA,KACFH,EAA0BG,QAG1B,CAACZ,EAAUD,IAeb,mCACGG,GAA4BE,GAAgCE,EAI7D,eAACT,EAAD,WACC,eAACpB,EAAD,gCAAyByB,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAyBW,QAClD,eAACpC,EAAD,mCAA4B2B,QAA5B,IAA4BA,OAA5B,EAA4BA,EAA6BU,UACzD,eAACrC,EAAD,mCAA4ByB,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAyBa,oBACrD,eAACtC,EAAD,mCAhBJ,WACC,IAAMuC,EAAU,OAAGV,QAAH,IAAGA,OAAH,EAAGA,EAAsBW,QAAO,SAACC,GAAD,MAA2B,SAAhBA,EAAMC,SAAkBL,OAC7EM,EAAY,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAsBW,QAAO,SAACC,GAAD,MAA2B,WAAhBA,EAAMC,SAAoBL,OACvF,MAAM,GAAN,OAAUE,EAAV,YAAwBI,GAacC,MACnC,eAAC5C,EAAD,qCAvBJ,WACC,IAAM6C,EAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAA6BU,OACrCS,EAAQ,OAAGjB,QAAH,IAAGA,OAAH,EAAGA,EAAsBQ,OACvC,MAAM,GAAN,OAAUQ,EAAV,YAAmBC,GAqBSC,MAGvBhB,EAGD,eAAC/B,EAAD,2BACeI,EAAgB,OAAC2B,QAAD,IAACA,OAAD,EAACA,EAAwBiB,OAAOC,UAAUC,MAAO,IADhF,cAFA,cAAC,IAAD,OAbF,cAAC,IAAD,OCZWC,EAhCM,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAO9B,EAA2B,EAA3BA,MAC9B,OACC,mCACE8B,EAAMC,KAAI,SAACC,EAAmBC,GAC9B,OACC,eAAC,IAAD,CAAqBC,QAAQ,EAA7B,UACC,eAACxC,EAAD,WACC,cAAChB,EAAD,UAAcsD,EAAKlB,OACnB,cAACpC,EAAD,UAAcsD,EAAKhB,mBACnB,cAAC,IAAD,UACC,cAACpB,EAAD,CACCH,OAAQ,EACR0C,GAAI,OACJC,gBAAiB,OACjBC,MAAO,OACPC,EAAG,OALJ,uBAYF,cAACjD,EAAD,UACC,cAAC,EAAD,CAAaW,MAAOA,EAAOC,SAAU+B,EAAKlB,WAlB9BmB,SCgCJM,EA1Ca,SAAC,GAAoD,IAAlDvC,EAAiD,EAAjDA,MAAiD,EACjDE,oBAAkB,GAD+B,mBACxEsC,EADwE,KAC/DC,EAD+D,OAEjCvC,qBAFiC,mBAExEwC,EAFwE,KAEvDC,EAFuD,OAGrDzC,qBAHqD,mBAGxE4B,EAHwE,KAGjEc,EAHiE,KAoB/E,OAfAjC,qBAAU,WACT,IAAMkC,EAAK,IAAIC,gBAWf,OAVAC,QAAQC,IAAI,CACX1E,EAAc,UAAD,OAAW0B,IAASY,MAAK,YAA6C,IAA1CC,EAAyC,EAAzCA,KACxC8B,EAAmB9B,MAEpBvC,EAAc,UAAD,OAAW0B,EAAX,WAA0BY,MAAK,YAA6C,IAA1CC,EAAyC,EAAzCA,KAC9C+B,EAAS/B,QAGTD,MAAK,kBAAM6B,GAAW,MACtBQ,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,MACxB,kBAAML,EAAGQ,WACd,CAACrD,IAGH,mCACGwC,EAGD,eAAC,IAAD,WACC,cAAC,IAAD,CAAec,eAAgB,SAA/B,SACC,eAACzE,EAAD,WAAa6D,EAAgB5B,KAA7B,kBAED,eAAC,IAAD,WACC,eAACpC,EAAD,sBACUI,EAAgB,OAAC4D,QAAD,IAACA,OAAD,EAACA,EAAiBa,YAD5C,gBAIA,cAAC,EAAD,CAAczB,MAAOA,EAAO9B,MAAOA,UAXrC,cAAC,IAAD,OCtBEwD,EAAiB7E,YAAOkB,IAAPlB,CAAH,wKAuCL8E,EA7BE,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,WAAY1D,EAAoC,EAApCA,MAC/B,OACC,eAAC,IAAD,CAAKqC,MAAO,QAASsB,YAAY,MAAMC,aAAa,KAAKC,SAAS,SAASC,EAAG,OAA9E,UACC,cAAC,IAAD,CAAQC,KAAM,QAASC,IAAKN,EAAYO,IAAG,UAAKjE,KAChD,cAAC,IAAD,CAAM8D,EAAG,SAAUI,WAAY,SAAUZ,eAAgB,SAAzD,SACC,cAAC,IAAD,CAAMa,WAAY,qBAAlB,SAAyCnE,MAG1C,cAAC,IAAD,CAAMkE,WAAY,SAAUE,cAAe,MAA3C,SACC,eAAC,IAAD,CAASlC,QAAQ,EAAjB,UACC,cAAC,IAAD,UACC,cAACsB,EAAD,CACC/D,OAAQ,EACR2C,gBAAiB,OACjBC,MAAO,OACPC,EAAG,OAJJ,0BASD,cAACjD,EAAD,UACC,cAAC,EAAD,CAAqBW,MAAOA,e,iBCxC5BqE,EAAW,CAChBC,cADgB,uOAWhBC,KCkCcC,EAjCa,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,aAA8C,EACpBvE,qBADoB,mBACrEwE,EADqE,KAC/CC,EAD+C,OAEtBzE,qBAFsB,mBAErE0E,EAFqE,KAEhDC,EAFgD,KAgB5E,OAbAlE,qBAAU,WACTrC,EACEwG,IADF,gBACeL,EAAazE,QAC1BY,MAAK,YAAoD,IAAjDC,EAAgD,EAAhDA,KACR8D,EAAwB9D,MAG1BvC,EACEwG,IADF,gBACeL,EAAazE,MAD5B,aAEEY,MAAK,YAAyC,IAAtCC,EAAqC,EAArCA,KACRgE,EAAuBhE,QAEvB,CAAC4D,IAEH,cAAC,IAAD,CAAKhF,OAAQ,iBAAb,SACEiF,GACA,qCACC,eAAChG,EAAD,oBAAoBgG,EAAqB1E,SACzC,eAACtB,EAAD,wCAAiCkG,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAqB7D,UACtD,eAACrC,EAAD,+BAA+BgG,EAAqBK,gBACpD,eAACrG,EAAD,yBACa,IACX,IAAIO,KAAJ,OAASyF,QAAT,IAASA,OAAT,EAASA,EAAsBnB,YAAYyB,cAAcC,MAAM,EAAG,aCkD1DC,MAvEf,WAAgB,IAAD,EACYhF,qBADZ,mBACPiF,EADO,KACAC,EADA,OAE4BlF,qBAF5B,mBAEPmF,EAFO,KAEQC,EAFR,KAcd,OAVA3E,qBAAU,WACTrC,EAAcwG,IAAI,UAAUlE,MAAK,YAA6C,IAA1CC,EAAyC,EAAzCA,KACnCuE,EAASvE,MAGVvC,EAAcwG,IAAI,kBAAkBlE,MAAK,YAAqD,IAAlDC,EAAiD,EAAjDA,KAC3CyE,EAAiBzE,QAEhB,IAGF,eAAC,IAAD,CAAetB,MAAOA,QAAtB,UACC,cAAC,SAAD,CAAQgG,OAAQlB,IAChB,qBAAKmB,UAAU,MAAf,SACC,wBAAQA,UAAU,aAAlB,SACC,eAAC,IAAD,CAAKC,EAAG,MAAO3B,EAAG,SAAlB,UACC,cAACjF,EAAD,CAAY6G,UAAW,SAAU5B,EAAG,SAApC,2BAEA,cAAC,IAAD,CAAM6B,gBAAgB,iBAAiBC,IAAK,EAA5C,SACGT,EAGDA,EAAMpD,KAAI,SAAC8D,EAAmB5D,GAAmB,IACxCyB,EAAsBmC,EAAtBnC,WAAY1D,EAAU6F,EAAV7F,MACpB,OAAO,cAAC,EAAD,CAAUA,MAAOA,EAAO0D,WAAYA,GAAiBzB,MAJ7D,cAAC,IAAD,MASD,cAACpD,EAAD,CAAY6G,UAAW,SAAU5B,EAAG,SAApC,2BACD,cAAC,IAAD,CAAM6B,gBAAgB,iBAAiBC,IAAK,EAA5C,SACGP,EAGDA,EAActD,KAAI,SAAC0C,EAAmCxC,GACrD,OACC,eAAC,IAAD,CAAqBC,QAAQ,EAA7B,UACC,eAACxC,EAAD,WACC,cAAChB,EAAD,UAAc+F,EAAazE,QAC3B,cAAC,IAAD,UACC,cAACJ,EAAD,CACCH,OAAQ,EACR0C,GAAI,OACJC,gBAAiB,OACjBC,MAAO,OACPC,EAAG,OALJ,uBAYF,cAACjD,EAAD,UACC,cAAC,EAAD,CAAiCoF,aAAcA,GAArBxC,OAjBdA,MAJhB,cAAC,IAAD,iBCnDR6D,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,W","file":"static/js/main.4fd5f235.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosParams = {\r\n\tbaseURL: \"https://api.github.com\",\r\n};\r\n\r\nconst axiosInstance = axios.create(axiosParams);\r\n\r\nexport { axiosInstance };\r\n","import styled from \"@emotion/styled\";\r\nimport { Text } from \"@chakra-ui/react\";\r\n\r\nconst TextPrimary = styled(Text)`\r\n\tfont-size: 18px;\r\n\tfont-family: Roboto, sans-serif;\r\n`;\r\n\r\nconst TextHeader = styled(TextPrimary)`\r\n\tfont-size: 24px;\r\n\tfont-weight: bold;\r\n`;\r\n\r\nexport { TextPrimary, TextHeader };\r\n","const calculateLastDay = (fromDate: Date) => {\r\n\tif (!fromDate) return;\r\n\tconst msDiff = new Date().getTime() - new Date(fromDate).getTime();\r\n\treturn Math.floor(msDiff / (1000 * 60 * 60 * 24));\r\n};\r\n\r\nexport { calculateLastDay };\r\n","import { Button, Flex, PopoverContent } from \"@chakra-ui/react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst PopoverContainer = styled(PopoverContent)<any>`\r\n\tbackground-color: #fff;\r\n\tborder: 1px solid ${({ theme }) => theme.colors.border};\r\n`;\r\n\r\nconst RepoInfoContainer = styled(Flex)`\r\n\tjustify-content: center;\r\n\tflex-direction: row;\r\n\tmargin: 10px 0;\r\n\tpadding: 10px 0;\r\n\tborder: 1px solid #222;\r\n\ttransition: all 300ms;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: #222;\r\n\t\tcolor: #fff;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nconst RepoInfoButton = styled(Button)`\r\n\tbackground-color: #222;\r\n\tcolor: #fff;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: #fff;\r\n\t\tcolor: #222;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nexport { PopoverContainer, RepoInfoContainer, RepoInfoButton };\r\n","import styled from \"@emotion/styled\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\n\r\nconst RepoDetailInfoContainer = styled(Flex)`\r\n\tjustify-content: center;\r\n\tflex-direction: column;\r\n`;\r\n\r\nexport { RepoDetailInfoContainer };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { axiosInstance } from \"../../API/axiosInstance\";\r\nimport { IRepositoryDetailed } from \"../../interfaces/repo.interface\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { TextPrimary } from \"../Typography/Typography.styled\";\r\nimport { IRepoPullRequest } from \"../../interfaces/repoPullRequest.interface\";\r\nimport { IRepoIssue } from \"../../interfaces/repoIssue.interface\";\r\nimport { RepoDetailInfoContainer } from \"./RepoDetails.styled\";\r\nimport { calculateLastDay } from \"../../utils/calculateDaysAgo\";\r\nimport { CommitInformation } from \"../../interfaces/repoCommit.interface\";\r\n\r\nconst RepoDetails = ({ login, repoName }) => {\r\n\tconst [detailedRepoInformation, setDetailedRepoInformation] = useState<IRepositoryDetailed>();\r\n\tconst [repoPullRequestsInformation, setRepoPullRequestsInformation] =\r\n\t\tuseState<IRepoPullRequest[]>();\r\n\tconst [repoIssueInformation, setRepoIssueInformation] = useState<IRepoIssue[]>();\r\n\tconst [repoCommitsInformation, setRepoCommitsInformation] = useState<CommitInformation>();\r\n\r\n\tuseEffect(() => {\r\n\t\taxiosInstance(`/repos/${login}/${repoName}`).then(\r\n\t\t\t({ data }: AxiosResponse<IRepositoryDetailed>) => {\r\n\t\t\t\tsetDetailedRepoInformation(data);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\taxiosInstance(`/repos/${login}/${repoName}/issues`).then(\r\n\t\t\t({ data }: AxiosResponse<IRepoIssue[]>) => {\r\n\t\t\t\tsetRepoIssueInformation(data);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\taxiosInstance(`/repos/${login}/${repoName}/pulls?state=all`).then(\r\n\t\t\t({ data }: AxiosResponse<IRepoPullRequest[]>) => {\r\n\t\t\t\tsetRepoPullRequestsInformation(data);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\taxiosInstance(`/repos/${login}/${repoName}/commits/master`).then(\r\n\t\t\t({ data }: AxiosResponse<CommitInformation>) => {\r\n\t\t\t\tsetRepoCommitsInformation(data);\r\n\t\t\t}\r\n\t\t);\r\n\t}, [repoName, login]);\r\n\r\n\tfunction calculatePullRequestsToIssuesRatio() {\r\n\t\tconst allPR = repoPullRequestsInformation?.length;\r\n\t\tconst openedPR = repoIssueInformation?.length;\r\n\t\treturn `${allPR}/${openedPR}`;\r\n\t}\r\n\r\n\tfunction calculateOpenClosedIssues() {\r\n\t\tconst openIssues = repoIssueInformation?.filter((issue) => issue.state === \"open\").length;\r\n\t\tconst closedIssues = repoIssueInformation?.filter((issue) => issue.state === \"closed\").length;\r\n\t\treturn `${openIssues}/${closedIssues}`;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{!detailedRepoInformation && !repoPullRequestsInformation && !repoIssueInformation ? (\r\n\t\t\t\t<ClipLoader />\r\n\t\t\t) : (\r\n\t\t\t\t// TODO sort with PR\r\n\t\t\t\t<RepoDetailInfoContainer>\r\n\t\t\t\t\t<TextPrimary>Repo name: {detailedRepoInformation?.name}</TextPrimary>\r\n\t\t\t\t\t<TextPrimary>Number of PR: {repoPullRequestsInformation?.length}</TextPrimary>\r\n\t\t\t\t\t<TextPrimary>Stars number: {detailedRepoInformation?.stargazers_count}</TextPrimary>\r\n\t\t\t\t\t<TextPrimary>Open / Closed issues {calculateOpenClosedIssues()}</TextPrimary>\r\n\t\t\t\t\t<TextPrimary>\r\n\t\t\t\t\t\tPull Requests / Issues {calculatePullRequestsToIssuesRatio()}\r\n\t\t\t\t\t</TextPrimary>\r\n\r\n\t\t\t\t\t{!repoCommitsInformation ? (\r\n\t\t\t\t\t\t<ClipLoader />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<TextPrimary>\r\n\t\t\t\t\t\t\tLast commit: {calculateLastDay(repoCommitsInformation?.commit.committer.date)}{\" \"}\r\n\t\t\t\t\t\t\tdays ago\r\n\t\t\t\t\t\t</TextPrimary>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</RepoDetailInfoContainer>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default RepoDetails;\r\n","import React from \"react\";\r\nimport {\r\n\tPopoverContainer,\r\n\tRepoInfoButton,\r\n\tRepoInfoContainer,\r\n} from \"./ProfileInformations/ProfileInformations.styled\";\r\nimport { TextPrimary } from \"./Typography/Typography.styled\";\r\nimport { Popover, PopoverTrigger } from \"@chakra-ui/react\";\r\nimport RepoDetails from \"./RepoDetails/RepoDetails\";\r\nimport { IRepository } from \"../interfaces/repo.interface\";\r\n\r\ninterface IUserRepoList {\r\n\trepos: IRepository[];\r\n\tlogin: string;\r\n}\r\n\r\nconst UserRepoList = ({ repos, login }: IUserRepoList) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{repos.map((repo: IRepository, index: number) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Popover key={index} isLazy={true}>\r\n\t\t\t\t\t\t<RepoInfoContainer>\r\n\t\t\t\t\t\t\t<TextPrimary>{repo.name}</TextPrimary>\r\n\t\t\t\t\t\t\t<TextPrimary>{repo.stargazers_count}</TextPrimary>\r\n\t\t\t\t\t\t\t<PopoverTrigger>\r\n\t\t\t\t\t\t\t\t<RepoInfoButton\r\n\t\t\t\t\t\t\t\t\tborder={0}\r\n\t\t\t\t\t\t\t\t\tml={\"15px\"}\r\n\t\t\t\t\t\t\t\t\tbackgroundColor={\"#fff\"}\r\n\t\t\t\t\t\t\t\t\twidth={\"33%%\"}\r\n\t\t\t\t\t\t\t\t\th={\"20px\"}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tInfo\r\n\t\t\t\t\t\t\t\t</RepoInfoButton>\r\n\t\t\t\t\t\t\t</PopoverTrigger>\r\n\t\t\t\t\t\t</RepoInfoContainer>\r\n\r\n\t\t\t\t\t\t<PopoverContainer>\r\n\t\t\t\t\t\t\t<RepoDetails login={login} repoName={repo.name} />\r\n\t\t\t\t\t\t</PopoverContainer>\r\n\t\t\t\t\t</Popover>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default UserRepoList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { Box, PopoverBody, PopoverHeader } from \"@chakra-ui/react\";\r\nimport { axiosInstance } from \"../../API/axiosInstance\";\r\nimport { TextHeader, TextPrimary } from \"../Typography/Typography.styled\";\r\nimport { IUserDetailed } from \"../../interfaces/user.interface\";\r\nimport { IRepository } from \"../../interfaces/repo.interface\";\r\nimport { calculateLastDay } from \"../../utils/calculateDaysAgo\";\r\nimport UserRepoList from \"../UserRepoList\";\r\n\r\nconst ProfileInformations = ({ login }: Partial<IUserDetailed>): JSX.Element => {\r\n\tconst [fetched, setFetched] = useState<boolean>(false);\r\n\tconst [userInformation, setUserInformation] = useState<IUserDetailed>();\r\n\tconst [repos, setRepos] = useState<IRepository[]>();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst ac = new AbortController();\r\n\t\tPromise.all([\r\n\t\t\taxiosInstance(`/users/${login}`).then(({ data }: AxiosResponse<IUserDetailed>) => {\r\n\t\t\t\tsetUserInformation(data);\r\n\t\t\t}),\r\n\t\t\taxiosInstance(`/users/${login}/repos`).then(({ data }: AxiosResponse<IRepository[]>) => {\r\n\t\t\t\tsetRepos(data);\r\n\t\t\t}),\r\n\t\t])\r\n\t\t\t.then(() => setFetched(true))\r\n\t\t\t.catch((err) => console.error(err));\r\n\t\treturn () => ac.abort();\r\n\t}, [login]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{!fetched ? (\r\n\t\t\t\t<ClipLoader />\r\n\t\t\t) : (\r\n\t\t\t\t<Box>\r\n\t\t\t\t\t<PopoverHeader justifyContent={\"center\"}>\r\n\t\t\t\t\t\t<TextHeader>{userInformation.name}'s Profile</TextHeader>\r\n\t\t\t\t\t</PopoverHeader>\r\n\t\t\t\t\t<PopoverBody>\r\n\t\t\t\t\t\t<TextPrimary>\r\n\t\t\t\t\t\t\tJoined: {calculateLastDay(userInformation?.created_at)} days ago.\r\n\t\t\t\t\t\t</TextPrimary>\r\n\r\n\t\t\t\t\t\t<UserRepoList repos={repos} login={login} />\r\n\t\t\t\t\t</PopoverBody>\r\n\t\t\t\t</Box>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default ProfileInformations;\r\n","import React from \"react\";\r\nimport { Avatar, Box, Button, Flex, Popover, PopoverTrigger, Text } from \"@chakra-ui/react\";\r\nimport { GrContactInfo } from \"react-icons/all\";\r\nimport ProfileInformations from \"../ProfileInformations/ProfileInformations\";\r\nimport { PopoverContainer } from \"../ProfileInformations/ProfileInformations.styled\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface IUserCard {\r\n\tavatar_url: string;\r\n\tlogin: string;\r\n}\r\n\r\nconst UserCardButton = styled(Button)`\r\n\ttransition: all 300ms;\r\n\tborder: 1px solid #222;\r\n\t&:hover {\r\n\t\tbackground-color: #222;\r\n\t\tcolor: #fff;\r\n\t\tcursor: pointer;\r\n\t}\r\n`\r\n\r\nconst UserCard = ({ avatar_url, login }: IUserCard): JSX.Element => {\r\n\treturn (\r\n\t\t<Box width={\"200px\"} borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" m={\"20px\"}>\r\n\t\t\t<Avatar size={\"cover\"} src={avatar_url} alt={`${login}`} />\r\n\t\t\t<Flex m={\"20px 0\"} alignItems={\"center\"} justifyContent={\"center\"}>\r\n\t\t\t\t<Text fontFamily={\"Roboto, sans-serif\"}>{login}</Text>\r\n\t\t\t</Flex>\r\n\r\n\t\t\t<Flex alignItems={\"center\"} flexDirection={\"row\"}>\r\n\t\t\t\t<Popover isLazy={true}>\r\n\t\t\t\t\t<PopoverTrigger>\r\n\t\t\t\t\t\t<UserCardButton\r\n\t\t\t\t\t\t\tborder={0}\r\n\t\t\t\t\t\t\tbackgroundColor={\"#fff\"}\r\n\t\t\t\t\t\t\twidth={\"100%\"}\r\n\t\t\t\t\t\t\th={\"20px\"}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRepos Info\r\n\t\t\t\t\t\t</UserCardButton>\r\n\t\t\t\t\t</PopoverTrigger>\r\n\t\t\t\t\t<PopoverContainer>\r\n\t\t\t\t\t\t<ProfileInformations login={login} />\r\n\t\t\t\t\t</PopoverContainer>\r\n\t\t\t\t</Popover>\r\n\t\t\t</Flex>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default UserCard;\r\n","import { css } from \"@emotion/react\";\r\nimport emotionReset from \"emotion-reset\";\r\n\r\nconst cssReset = [\r\n\tcss`\r\n\t\t*,\r\n\t\t*::after,\r\n\t\t*::before {\r\n\t\t\tbox-sizing: border-box;\r\n\t\t\t-moz-osx-font-smoothing: grayscale;\r\n\t\t\t-webkit-font-smoothing: antialiased;\r\n\t\t\tfont-smoothing: antialiased;\r\n\t\t}\r\n\t`,\r\n\temotionReset,\r\n];\r\n\r\nexport { cssReset };\r\n","import { TextPrimary } from \"../Typography/Typography.styled\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { axiosInstance } from \"../../API/axiosInstance\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport {\r\n\tIMember,\r\n\tIOrganizationCommon,\r\n\tIOrganizationDetails,\r\n} from \"../../interfaces/organizations.interface\";\r\n\r\ninterface IOrganizationDetailsProps {\r\n\torganization: IOrganizationCommon;\r\n}\r\n\r\nconst OrganizationDetails = ({ organization }: IOrganizationDetailsProps) => {\r\n\tconst [organizationsDetails, setOrganizationsDetails] = useState<IOrganizationDetails>();\r\n\tconst [organizationMembers, setOrganizationMembers] = useState<IMember[]>();\r\n\tuseEffect(() => {\r\n\t\taxiosInstance\r\n\t\t\t.get(`/orgs/${organization.login}`)\r\n\t\t\t.then(({ data }: AxiosResponse<IOrganizationDetails>) => {\r\n\t\t\t\tsetOrganizationsDetails(data);\r\n\t\t\t});\r\n\r\n\t\taxiosInstance\r\n\t\t\t.get(`/orgs/${organization.login}/members`)\r\n\t\t\t.then(({ data }: AxiosResponse<IMember[]>) => {\r\n\t\t\t\tsetOrganizationMembers(data);\r\n\t\t\t});\r\n\t}, [organization]);\r\n\treturn (\r\n\t\t<Box border={\"1px solid #222\"}>\r\n\t\t\t{organizationsDetails && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<TextPrimary>Name: {organizationsDetails.login}</TextPrimary>\r\n\t\t\t\t\t<TextPrimary>Number of members: {organizationMembers?.length}</TextPrimary>\r\n\t\t\t\t\t<TextPrimary>Number of repos: {organizationsDetails.public_repos}</TextPrimary>\r\n\t\t\t\t\t<TextPrimary>\r\n\t\t\t\t\t\tCreated at:{\" \"}\r\n\t\t\t\t\t\t{new Date(organizationsDetails?.created_at).toISOString().slice(0, 10)}\r\n\t\t\t\t\t</TextPrimary>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default OrganizationDetails;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nimport { Box, Grid, Popover, PopoverTrigger, theme } from \"@chakra-ui/react\";\r\nimport { Global, ThemeProvider } from \"@emotion/react\";\r\nimport { IUserCommon } from \"./interfaces/user.interface\";\r\nimport UserCard from \"./components/UserCard/UserCard\";\r\nimport { cssReset } from \"./cssReset\";\r\nimport { axiosInstance } from \"./API/axiosInstance\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { IOrganizationCommon } from \"./interfaces/organizations.interface\";\r\nimport {TextHeader, TextPrimary } from \"./components/Typography/Typography.styled\";\r\nimport OrganizationDetails from \"./components/OrganizationDetails/OrganizationDetails\";\r\nimport {\r\n\tPopoverContainer,\r\n\tRepoInfoButton,\r\n\tRepoInfoContainer,\r\n} from \"./components/ProfileInformations/ProfileInformations.styled\";\r\n\r\nfunction App() {\r\n\tconst [users, setUsers] = useState<IUserCommon[]>();\r\n\tconst [organizations, setOrganizations] = useState<IOrganizationCommon[]>();\r\n\r\n\tuseEffect(() => {\r\n\t\taxiosInstance.get(\"/users\").then(({ data }: AxiosResponse<IUserCommon[]>) => {\r\n\t\t\tsetUsers(data);\r\n\t\t});\r\n\r\n\t\taxiosInstance.get(\"/organizations\").then(({ data }: AxiosResponse<IOrganizationCommon[]>) => {\r\n\t\t\tsetOrganizations(data);\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<Global styles={cssReset} />\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<Box w={\"75%\"} m={\"0 auto\"}>\r\n\t\t\t\t\t\t<TextHeader textAlign={\"center\"} m={\"50px 0\"}>Users & Repos</TextHeader>\r\n\r\n\t\t\t\t\t\t<Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\r\n\t\t\t\t\t\t\t{!users ? (\r\n\t\t\t\t\t\t\t\t<ClipLoader />\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\tusers.map((user: IUserCommon, index: number) => {\r\n\t\t\t\t\t\t\t\t\tconst { avatar_url, login } = user;\r\n\t\t\t\t\t\t\t\t\treturn <UserCard login={login} avatar_url={avatar_url} key={index} />;\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t<TextHeader textAlign={\"center\"} m={\"50px 0\"}>Organizations</TextHeader>\r\n\t\t\t\t\t\t<Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\r\n\t\t\t\t\t\t\t{!organizations ? (\r\n\t\t\t\t\t\t\t\t<ClipLoader />\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\torganizations.map((organization: IOrganizationCommon, index: number) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Popover key={index} isLazy={true}>\r\n\t\t\t\t\t\t\t\t\t\t\t<RepoInfoContainer>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TextPrimary>{organization.login}</TextPrimary>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<PopoverTrigger>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RepoInfoButton\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tborder={0}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tml={\"15px\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor={\"#fff\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth={\"33%%\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\th={\"20px\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tInfo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</RepoInfoButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</PopoverTrigger>\r\n\t\t\t\t\t\t\t\t\t\t\t</RepoInfoContainer>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<PopoverContainer>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<OrganizationDetails key={index} organization={organization} />\r\n\t\t\t\t\t\t\t\t\t\t\t</PopoverContainer>\r\n\t\t\t\t\t\t\t\t\t\t</Popover>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</header>\r\n\t\t\t</div>\r\n\t\t</ThemeProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}